#!/bin/sh

SCRIPT_NAME="`basename $0`"
SCRIPT_DIR="$(dirname `realpath $0`)"
CUR_DIR="`pwd`"

# suck in the per-device options
CFGNAME=$1
shift
. ${SCRIPT_DIR}/../cfg/${CFGNAME} || exit 1

# If X_BUILD_BASE_CFG is set, also load that in.
if [ -n "${X_BUILD_BASE_CFG}" ]; then
	. ${SCRIPT_DIR}/../cfg/base/${X_BUILD_BASE_CFG} || exit 1
fi

# include the config variable generation code
. ${SCRIPT_DIR}/../lib/cfg.sh || exit 1

# XXX TODO Enforce the maximum size of the kernel image.
# XXX TODO Enforce the maximum size of the rootfs image.

# lzma the kernel image
# Use the lzma from ports (/usr/local/bin/lzma) rather than the lzma
# from base, as EOS (end of stream) markers aren't allowed for uboot.
# base version gives following error while trying to uncompress the kernel on boot:
# "Uncompressing Kernel Image ... Stream with EOS marker is not supportedLZMA ERROR 1"

/usr/local/bin/lzma e ${X_KERNEL} ${X_TFTPBOOT}/kernel.${KERNCONF}.lzma || exit 1

# Check the kernel file for a start address.
# I think this /used/ to be a fixed 256 bytes, but no longer..

X_KERN_ELF_STARTADDR="`elfdump -e ${X_KERNEL} | grep e_entry | cut -f2 -d: | sed 's@ *@@'`"
echo "*** UBOOT_KERN_STARTADDR=${UBOOT_KERN_STARTADDR}"
echo "*** X_KERN_ELF_STARTADDR=${X_KERN_ELF_STARTADDR}"

UBOOT_KERN_STARTADDR=${X_KERN_ELF_STARTADDR}

# Create the firmware
mkimage -A ${UBOOT_ARCH} -O linux -T kernel -C lzma \
  -a ${UBOOT_KERN_LOADADDR} -e ${UBOOT_KERN_STARTADDR} \
  -n "FreeBSD" -d ${X_TFTPBOOT}/kernel.${KERNCONF}.lzma \
  ${X_TFTPBOOT}/kernel.${KERNCONF}.lzma.uImage \
  || exit 1

# If this is a carambola we can also create a single image with both the kernel and
# filesystem, to make flashing more efficient.
if [ "${X_UBOOT_KERNROOTIMG}" = "YES" ] ; then
  X_FLASH=${X_TFTPBOOT}/${CFGNAME}.flashinst.img
  (
    dd if=${X_TFTPBOOT}/kernel.${KERNCONF}.lzma.uImage bs=65536 conv=sync || exit 1
    dd if=${X_FSIMAGE}${X_FSIMAGE_SUFFIX} || exit 1
  ) > ${X_FLASH}

  # XXX TODO Enforce the maximum size of the combined image.
  IMG_SIZE="`stat -f '%z' ${X_FLASH}`"

  echo "*** image size: ${IMG_SIZE}"

  if [ ${IMG_SIZE} -gt ${X_UBOOT_KERNROOTIMG_MAX_SIZE} ]; then
    echo "*** Image is too big: ${IMG_SIZE} > ${X_UBOOT_KERNROOTIMG_MAX_SIZE}"
    exit 1
  fi
fi

exit 0
