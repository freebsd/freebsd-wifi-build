#!/bin/sh

SCRIPT_NAME="`basename $0`"
SCRIPT_DIR="$(dirname `realpath $0`)"
CUR_DIR="`pwd`"

# suck in the per-device options
CFGNAME=$1
shift
. ${SCRIPT_DIR}/../cfg/${CFGNAME} || exit 1
# If X_BUILD_BASE_CFG is set, also load that in.
if [ -n "${X_BUILD_BASE_CFG}" ]; then
	. ${SCRIPT_DIR}/../cfg/base/${X_BUILD_BASE_CFG} || exit 1
fi

# include the config variable generation code
. ${SCRIPT_DIR}/../lib/cfg.sh || exit 1

# get the kernel MFS size
# this sets mfs_ofs, mfs_end, mfs_start, mfs_size
install -m 755 ${X_KERNEL} ${X_KERNEL}.netboot

mfs_size=`stat -f '%z' ${X_FSIMAGE}${X_FSIMAGE_SUFFIX} 2> /dev/null`
# If we can't determine MFS image size - bail.
[ -z ${mfs_size} ] && echo "Can't determine MFS image size" && exit 1

T_OBJDUMP_DIR="${CUR_DIR}/../obj/${X_BUILD_BASE_CFG}"
T_OBJDUMP="${T_OBJDUMP_DIR}/${CUR_DIR}/${TARGET}.${TARGET_ARCH}/tmp/usr/bin/objdump"
sec_info=`${T_OBJDUMP} -h ${X_KERNEL}.netboot 2> /dev/null | grep " oldmfs "`
# If we can't find the mfs section within the given kernel - bail.
[ -z "${sec_info}" ] && echo "Can't locate mfs section within kernel" && exit 1

sec_size=`echo ${sec_info} | awk '{printf("%d", "0x" $3)}' 2> /dev/null`
sec_start=`echo ${sec_info} | awk '{printf("%d", "0x" $6)}' 2> /dev/null`

# If the mfs section size is smaller than the mfs image - bail.
[ ${sec_size} -lt ${mfs_size} ] && echo "MFS image too large" && exit 1

echo "*** copying the mfsroot into the kernel image"
# Dump the mfs image into the mfs section
dd if=${X_FSIMAGE}${X_FSIMAGE_SUFFIX} ibs=8192 \
    of=${X_KERNEL}.netboot obs=${sec_start} oseek=1 \
    conv=notrunc 2> /dev/null
[ $? -ne 0 ] && echo "Can't embed MFS image into kernel" && exit 1

echo "*** generate md5 for ${X_KERNEL}.netboot"
md5 -q ${X_KERNEL}.netboot > ${X_KERNEL}.netboot.md5

cp ${X_KERNEL}.netboot ${X_TFTPBOOT}/kernel.${X_KERNSUFFIX}.netboot

echo "*** Complete."
